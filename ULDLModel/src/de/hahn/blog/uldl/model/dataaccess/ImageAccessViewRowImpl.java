package de.hahn.blog.uldl.model.dataaccess;

import de.hahn.blog.uldl.model.dataaccess.common.ImageAccessViewRow;

import oracle.jbo.domain.BlobDomain;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Nov 30 21:18:19 CET 2011
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ImageAccessViewRowImpl
    extends ViewRowImpl
    implements ImageAccessViewRow
{
    public static final int ENTITY_IMAGES = 0;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum
    {
        ImageId
        {
            public Object get(ImageAccessViewRowImpl obj)
            {
                return obj.getImageId();
            }

            public void put(ImageAccessViewRowImpl obj, Object value)
            {
                obj.setImageId((Long)value);
            }
        }
        ,
        ContentType
        {
            public Object get(ImageAccessViewRowImpl obj)
            {
                return obj.getContentType();
            }

            public void put(ImageAccessViewRowImpl obj, Object value)
            {
                obj.setContentType((String)value);
            }
        }
        ,
        ImageData
        {
            public Object get(ImageAccessViewRowImpl obj)
            {
                return obj.getImageData();
            }

            public void put(ImageAccessViewRowImpl obj, Object value)
            {
                obj.setImageData((BlobDomain)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(ImageAccessViewRowImpl object);

        public abstract void put(ImageAccessViewRowImpl object, Object value);

        public int index()
        {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex()
        {
            return firstIndex;
        }

        public static int count()
        {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues()
        {
            if (vals == null)
            {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int IMAGEID = AttributesEnum.ImageId.index();
    public static final int CONTENTTYPE = AttributesEnum.ContentType.index();
    public static final int IMAGEDATA = AttributesEnum.ImageData.index();

    /**
     * This is the default constructor (do not remove).
     */
    public ImageAccessViewRowImpl()
    {
    }

    /**
     * Gets Images entity object.
     * @return the Images
     */
    public EntityImpl getImages()
    {
        return (EntityImpl) getEntity(ENTITY_IMAGES);
    }

    /**
     * Gets the attribute value for IMAGE_ID using the alias name ImageId.
     * @return the IMAGE_ID
     */
    public Long getImageId()
    {
        return (Long) getAttributeInternal(IMAGEID);
    }

    /**
     * Sets <code>value</code> as attribute value for IMAGE_ID using the alias name ImageId.
     * @param value value to set the IMAGE_ID
     */
    public void setImageId(Long value)
    {
        setAttributeInternal(IMAGEID, value);
    }

    /**
     * Gets the attribute value for CONTENT_TYPE using the alias name ContentType.
     * @return the CONTENT_TYPE
     */
    public String getContentType()
    {
        return (String) getAttributeInternal(CONTENTTYPE);
    }

    /**
     * Sets <code>value</code> as attribute value for CONTENT_TYPE using the alias name ContentType.
     * @param value value to set the CONTENT_TYPE
     */
    public void setContentType(String value)
    {
        setAttributeInternal(CONTENTTYPE, value);
    }

    /**
     * Gets the attribute value for IMAGE_DATA using the alias name ImageData.
     * @return the IMAGE_DATA
     */
    public BlobDomain getImageData()
    {
        return (BlobDomain) getAttributeInternal(IMAGEDATA);
    }

    /**
     * Sets <code>value</code> as attribute value for IMAGE_DATA using the alias name ImageData.
     * @param value value to set the IMAGE_DATA
     */
    public void setImageData(BlobDomain value)
    {
        setAttributeInternal(IMAGEDATA, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef)
        throws Exception
    {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count()))
        {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef)
        throws Exception
    {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count()))
        {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
